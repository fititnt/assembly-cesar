
	ORG	0

	MOV	#Stack,R6

	; Teste com valor positivo
	;MOV	#1200,-(R6)		; n
	MOV	#55555,-(R6)		; n
	MOV	#String,-(R6)	; s
	JSR	R7,uint2str
	ADD	#4,R6

	; Teste com valor negativo
	;MOV	#-1200,-(R6)	; n
	;MOV	#String,-(R6)	; s
	;JSR	R7,int2str
	;ADD	#4,R6

	MOV #5,R0
	MOV -(R6),R1
	MOV -(R6),R1
	;MOV #String,R1
	MOV #65500,R2
	JSR R7,_S_ESCREVER_NO_VISOR
	HLT

;>
;>
;> Subrotina para escrever mensagem no visor
;>
;> Chamada da subrotina:
;>
;> MOV #tammensagem,R0          ; tamanho da mensagem (em caracteres)
;> MOV #endmensagem,R1          ; endereco da mensagem a ser escrita no visor
;> MOV #endvisor,R2             ; endereco do LED onde deve iniciar a mensagem
;> JSR R7,_S_ESCREVER_NO_VISOR
;>

_S_ESCREVER_NO_VISOR:
__VOLTA_ESCR:
          MOV (R1),R3           ; coloca 2 caracteres em R3
          ASR R3                ; alinha primeiro caractere
          ASR R3                ; a direita do registrador,
          ASR R3                ; porque quando se escreve
          ASR R3                ; na memoria a partir do
          ASR R3                ; endereco 65500 apenas o byte
          ASR R3                ; menos significativo e' escrito
          ASR R3                ; na posicao correspondente
          ASR R3                ; a um LED do visor
          MOV R3,(R2)           ; move para o visor
          SOB R0,__SEGUNDO      ; se ja moveu todo o texto,
          RTS R7                ; retorna ao ponto de chamada
                                ; senao, vai mover o segundo
                                ; caractere da mesma palavra
__SEGUNDO:
          INC R2                ; aponta para proximo LED
          BEQ __FIM_VISOR2      ; fim do visor - volta ao LED 00
__CONTINUA2:
          MOV (R1)+,R3          ; mesmos 2 caracteres em R3 e
                                ; incrementa apontador do texto
          MOV R3,(R2)           ; desta vez, move o segundo byte
          SOB R0,__PROXIMO_LED  ; se ja moveu todo o texto,
          RTS R7                ; retorna ao ponto de chamada
__PROXIMO_LED:
          INC R2                ; senao, aponta proximo LED
          BNE __VOLTA_ESCR      ; e repete o laco
                                ; fim do visor - volta ao LED 00
__FIM_VISOR1:
          MOV #65500,R2         ; aponta para primeiro LED
          BR  __VOLTA_ESCR      ; volta a escrever no visor
__FIM_VISOR2:
          MOV #65500,R2         ; aponta para primeiro LED
          BR  __CONTINUA2       ; volta a escrever no visor

;**********************************************************
; void int2str(char *s, uint n) {
;	2(R6) -> s -> R1
;	4(R6) -> n -> R2
;
;**********************************************************
int2str:
	MOV	2(R6),R1	; s
	MOV	4(R6),R2	; n

	BPL	EhPositivo	; 	if ( n < 0 ) {

	NEG	R2			; 		n = -n;

	MOV	-1(R1),R0	; 		*s++ = '-';
	AND	#HFF00,R0
	OR	#'-',R0
	MOV	R0,-1(R1)
	INC	R1
					; 	}

EhPositivo:
	MOV	R2,-(R6)	; 	uint2str(s,n);
	MOV	R1,-(R6)
	JSR	R7,uint2str
	ADD	#4,R6

	RTS	R7			; }


;**********************************************************
; void uint2str(char *s, uint n)
;	2(R6) -> s -> R1
;	4(R6) -> n -> R2
;
;	Lacos  -> R5
;	pTab10 -> R4
;	dig    -> R3
;
;**********************************************************
Tab10:		DAW	10000, 1000, 100, 10
uint2str:
	MOV	2(R6),R1	; R1 = s
	MOV	4(R6),R2	; R2 = n

	MOV	#Tab10,R4	; pTab10 = Tab10;
	MOV	#4,R5		; Lacos = 4;

Loop:				; do {
	MOV	#'0',R3		; 	dig = '0';

LoopInterno:
	CMP	R2,(R4)		; 	while (n >= *pTab10) {
	BLT	EhMenor
	INC	R3			; 		++dig;
	SUB	(R4),R2		; 		n -= *pTab10;
	JMP	LoopInterno	; 	}

EhMenor:
	MOV	-1(R1),R0	; 	*s++ = dig;
	AND	#HFF00,R0
	OR	R3,R0
	MOV	R0,-1(R1)
	INC	R1

	ADD	#2,R4		; 	++pTab10;

	SOB	R5,Loop		; } while (--Lacos);

	ADD	#'0',R2		; *s++ = n + ‘0’;
	MOV	-1(R1),R0
	AND	#HFF00,R0
	OR	R2,R0
	MOV	R0,-1(R1)
	INC	R1

	MOV	-1(R1),R0	; *s++ = '\0;
	AND	#HFF00,R0
	MOV	R0,-1(R1)

	RTS	R7


String:		DAB	'123456'

; Tamanho do stack de 1024 palavras
		DAW		[1024]
Stack:

; Tamanho do stack de 1024 palavras
		DAW		[1024]
Stack2:
